########################################################################################################################################################################
# die♂deutsche♂Orthopädie proundly presents
# Android int2label script
# Usin' R.java post decompilation of an .apk, to convert
# the integer value amongst UI objects to
# its original label to improve code readability
# 
# usage: 
# Android.int2label.sh [options] parameter
# 
# options: 
# 
# unpack: 
# 	-U or --unpack: parameter becomes archive file generated by
# 	Eclipse Java decompilation plugin
# 
# repack: 
# 	-R or --repack: repack the int2labeled source codes into a .tar.bz2 archive, 
# 	follow by the desired archive name WITHOUT white space, OR just leave blank
# 	and it will name the archive automatically
# 
# help:
# 	-H or -h or --help: ask for help, just like other Linux programs
# 
# parameter (directory/archive): 
# 	just requires workin' directory or archive location
# 
# HAVE A NICE REVERSE ENGINEERIN', die♂deutsche♂Orthopädie out
# 
# ps. 
# 	长发都tm是怪♂物
# 	long hair girls are all fuckin' mons♂ters
# 	短发才tm是萌♂妹
# 	short hair girls are all fuckin' moe♂girls
# 	短发大♂法好
# 	VIVA♂LA SHORT HAIR
########################################################################################################################################################################

########################                          Parameter Analysis                           ########################
parameters=`getopt -o hHUR:: -a -l help,unpack,repack:: -- "$@"`

if [ $? != 0 ]
then  
    echo "Houston, we have a problem: Unrecognized Option Detected, Terminating....." >&2  
    exit 1  
fi

unpack=0 # by default
repack=0 # by default
newarchive="" # by default

eval set -- "$parameters" 
while true  
do  
    case "$1" in  
		-U | --unpack)  
			unpack=1
            shift
            ;;  		
		-R | --repack)
			repack=1
			case "$2" in
				"") 
					newarchive=""
					shift 2 
					;;
				*)
					newarchive=$2
					shift 2
					;;
			esac ;;
		-h | -H | --help)  
			echo "die♂deutsche♂Orthopädie proundly presents"
			echo "Android int2label script"
			echo "Usin' R.java post decompilation of an .apk, to convert"
			echo "the integer value amongst UI objects to"
			echo "its original label to improve code readability"
			echo
			echo "usage: "
			echo "Android.int2label.sh [options] parameter"
			echo
			echo "options: "
			echo
			echo "unpack: "
			echo "	-U or --unpack: parameter becomes archive file generated by "
			echo "	Eclipse Java decompilation plugin"
			echo
			echo "repack: "
			echo "	-R or --repack: repack the int2labeled source codes into a .tar.bz2 archive, "
			echo "	follow by the desired archive name WITHOUT white space, OR just leave blank"
			echo "	and it will name the archive automatically"
			echo
			echo "help: "
			echo "	-H or -h or --help: ask for help, just like other Linux programs"
			echo
			echo "parameter (fid/tid/folder/file): "
			echo "	just requires workin' directory or archive location"
			echo
			echo "HAVE A NICE REVERSE ENGINEERIN', die♂deutsche♂Orthopädie out"
			echo
			echo "ps. "
			echo "	长发都tm是怪♂物"
			echo "	long hair girls are all fuckin' mons♂ters"
			echo "	短发才tm是萌♂妹"
			echo "	short hair girls are all fuckin' moe♂girls"
			echo "	短发大♂法好"
			echo "	VIVA♂LA SHORT HAIR"
			exit
            shift
            ;;  		
        --)
			parameter=$2
            shift  
            break  
            ;;  
        *)   
            echo "Internal error!"  
            exit 1  
            ;;  
        esac  
done

if [ -z "$parameter" ]
then
	echo "Houston, we have a problem: You MUST at least provide a parameter"
	exit 1
fi
########################                          Parameter Analysis ends                           ########################

########################                          Function: Process R.java                           ########################
function ProcessR()
{
	grep -Eo "int .* = [0-9]*;" R.java | sed 's/int//g ' | sed 's/ //g ' | sed 's/;//g ' > R.reduced2.java
	#for line in $(cat R.reduced.java)
	#do
	#	int=$(echo $line | cut -d= -f2)
	#	label=$(echo $line | cut -d= -f1)
	#	echo "$int ------------> $label"
	#done
}
########################                          Function: Process R.java ends                           ########################

########################                          Function: Read R.java                           ########################
function readR()
{
	lineid=$(expr $lineid + 1)
	line=$(sed -n "$lineid"p R.java)
}
########################                          Function: Read R.java ends                           ########################

########################                          Function: Recursively Process R.java                           ########################
function RProcessR()
{
	local prefix
	prefix=$1
	readR
	while [ ! -z "$line" ]
	do
		check1=$(echo $line | grep -Eo "class .* \{")
		if [ ! -z "$check1" ] 
		then
			#echo $line | grep -Eo "class .* \{"
			appended=$(echo $check1 | sed 's/class//g ' | sed 's/{//g ' | sed 's/ //g ')
			#echo "----------------------------------------------ENTER"
			#echo "$prefix$appended."
			#echo "----------------------------------------------"
			RProcessR "$prefix$appended."
		else
			#echo $line | grep -Eo "int .* = [0-9]*;"
			check2=$(echo $line | grep -Eo "int .* = [0-9]*;")
			if [ ! -z "$check2" ]
			then
			#	echo $prefix
				distrilled=$(echo $check2 | sed 's/int//g ' | sed 's/ //g ' | sed 's/;//g ')
				echo "$prefix$distrilled" >> R.reduced.java
				
			else
			#	echo "$(echo $line | grep -Eo "int .* = [0-9]*;")"
				if [ ! -z "$(echo $line | grep -Eo "\}")" ]
				then
					#echo "----------------------------------------------RETURN"
					return
				fi
			fi
		fi
		readR
	done
}
########################                          Function: Recursively Process R.java ends                           ########################

########################                          Function: Process Single File                           ########################
function processSingleFile()
{
	filename=$1
	for line in $(cat R.reduced.java)
	do
		int=$(echo $line | cut -d= -f2)
		label=$(echo $line | cut -d= -f1)
		sed -i "s/$int/$label/g " $filename
		#sed 's/$int/$label/g ' $filename > ${filename%.*}.new.${filename##*.}
		#rm -f $filename
	done
}
########################                          Function: Process Single File ends                           ########################

########################                          Main Program                            ########################
shelldir=$(pwd)
if [ "${parameter#/}" != "${parameter}" ]
then # Absolute Path
#		if test -d $parameter	
#		then	
			current_dir=$parameter # Absolute Path, Folder
#		else
#			current_dir=${parameter##*/} # Absolute Path, File
#		fi
	else # Relative Path
	if test -d $parameter
	then
		current_dir=$(pwd)/$parameter # Relative Path, Folder
	else
		current_dir=$parameter # Relative Path, File
	fi
fi

if [ $unpack != 0 ]
then
	echo "(+) Stage O: Unpackin' the Archive"
	mkdir ${current_dir%.*}
	cd ${current_dir%.*}
	unzip -j ../$current_dir
	current_dir="$shelldir/${current_dir%.*}"
	echo "(!) Stage O complete"
	echo
else
	cd $current_dir
fi
echo "" > R.reduced.java
lineid=0
echo "(+) Stage I: Processin' R.java"
RProcessR ""
echo "(!) Stage I complete"
#ProcessR
echo
echo "(+) Stage II: Replacin' Integers with Labels"
for file in $(ls $current_dir)
do
	if test -d $file
	then
		echo ""
	else
	echo "	(+) Replacin' Single File $file"
		processSingleFile "$current_dir/$file"
	echo "	(!) Replacin' Single File $file complete"
	fi
done
echo "(!) Stage II complete"


#for line in $(cat R.reduced.java)
#	do
#		int=$(echo $line | cut -d= -f2)
#		label=$(echo $line | cut -d= -f1)
#		echo "$int ------------> $label"
#	done

#for line in $(cat R.reduced2.java)
#	do
#		int=$(echo $line | cut -d= -f2)
#		label=$(echo $line | cut -d= -f1)
#		echo "$int ------------> $label"
#	done
cd $shelldir
if [ $repack != 0 ]
then
	echo
	echo "(+) Stage III: Repackin' into Archive"
	case "$newarchive" in
		"") 
			real_current_dir=${current_dir##*$shelldir/}
			if [ "$real_current_dir" = "$current_dir" ]
			then
				archive_filename=${current_dir//\//.}
				archive_filename=${archive_filename#*.}
				archive_filename=${archive_filename%.*}
				echo "(!) the workin' directiory is NOT under shell directory"
				echo "$shelldir/$archive_filename.tar.bz2"
				echo ${current_dir##*$shelldir/}
				echo 
				tar -cjvf "$shelldir/$archive_filename.tar.bz2" ${current_dir##*$shelldir/}
			else
				archive_filename=${real_current_dir//\//.}
				archive_filename=${archive_filename#*.}
				archive_filename=${archive_filename%.*}
				echo "(!) the workin' directiory is under shell directory"
				echo "${real_current_dir//\//.}.tar.bz2"
				echo ${current_dir##*$shelldir/}
				tar -cjvf "$archive_filename.tar.bz2" ${current_dir##*$shelldir/}
			fi
			;;
		*)
			# tar -cjvf $newarchive $current_dir
			echo "(!) Filename SET"
			echo $newarchive
			echo ${current_dir##*$shelldir/}
			tar -cjvf $newarchive ${current_dir##*$shelldir/}
			;;
	esac
	echo "(!) Stage III complete"
fi
echo
echo "(!!!) ALL CLEAR"
########################                          Main Program ends                            ########################
